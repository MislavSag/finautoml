% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpFilterRows.R
\name{mlr_pipeops_filterrows}
\alias{mlr_pipeops_filterrows}
\alias{PipeOpFilterRows}
\title{PipeOpFilterRows}
\format{
[`R6Class`] object inheriting from [`PipeOpTaskPreproc`]/[`PipeOp`].
}
\description{
Filter rows of the data of a [`Task`][mlr3::Task].
}
\section{Construction}{

```
PipeOpFilterRows$new(id = "filterrows", param_vals = list())
```

* `id` :: `character(1)` \cr
  Identifier of resulting object, default `"filterrows"`.
* `param_vals` :: named `list` \cr
  List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
  be set during construction. Default `list()`.
}

\section{Parameters}{

The parameters are the parameters inherited from [`PipeOpTaskPreproc`], as well as:
* `filter_formula` :: `formula` | `NULL` \cr
  Expression of the filtering to be performed, in the form of a `formula` that evaluates to `TRUE` or `FALSE`
  for each row within the frame of the [`data.table`] [`DataBackend`][mlr3::DataBackend] of the [`Task`][mlr3::Task].
  Rows for which the evaluation is `TRUE` are kept in the output [`Task`][mlr3::Task], others are removed.
  Initialized to `NULL`, i.e., no filtering is performed and all rows are kept.
* `SDcols` :: `function` | [`Selector`] \cr
  [`Selector`] function, takes a [`Task`][mlr3::Task] as an argument and returns a `character` vector of features.
  This character vector is set as the `.SDcols` argument when the formula above is evaluated within the frame of the
  [`data.table`] [`DataBackend`][mlr3::DataBackend] of the [`Task`][mlr3::Task].
  Initialized to [`selector_all()`], i.e., all features can be used as the `.SD` variable.
* `phase` :: `character(1)` \cr
  Character specifying the phase when filtering should be performed. Can either be `"always"`, `"train"`, or `"predict"`.
  Initialized to `"always"`, i.e., filtering is performed both during training and prediction.
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{PipeOpFilterRows}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFilterRows-new}{\code{PipeOpFilterRows$new()}}
\item \href{#method-PipeOpFilterRows-clone}{\code{PipeOpFilterRows$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFilterRows-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFilterRows-new}{}}}
\subsection{Method \code{new()}}{
Constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFilterRows$new(id = "filterrows", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{[character(1)]
Identifier of the resulting object.
Default is `"filterrows"`.}

\item{\code{param_vals}}{[named list]
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default is `list()`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
[`PipeOpFilterRows`].
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFilterRows-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFilterRows-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFilterRows$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
